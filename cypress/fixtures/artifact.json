{
    "artifact": {
        "artifact_group": {
            "owner": {
                "person": {
                    "id": 14,
                    "name": "David Johnson"
                },
                "id": 2
            },
            "publication": {
                "artifact": {
                    "owner": {
                        "person": {
                            "id": 14,
                            "name": "David Johnson"
                        },
                        "id": 2
                    },
                    "id": 432,
                    "artifact_group_id": 432,
                    "type": "software",
                    "url": "https://gitlab.flux.utah.edu/a3/vmi",
                    "ext_id": "https://gitlab.flux.utah.edu/a3/vmi",
                    "title": "Stackdb: A C Library for \" Stackable\" Debugging and Virtual Machine Introspection",
                    "name": null,
                    "ctime": "2021-08-12T14:24:49.836067",
                    "mtime": "2021-08-12T14:34:53.324048",
                    "description": "Stackdb is a C library that allows a user to write programs to debug, inspect, modify, and analyze the behavior of other running programs --- from virtual machines (Xen, KVM/QEMU) to Linux userspace programs (via ptrace(2) ).  This means Stackdb can be used to debug programs running on your desktop machine; or it can be used to debug virtual machines and the programs running inside them! Stackdb is useful both as a featureful debugger, and as a tool for Virtual Machine Introspection (i.e., memory forensics, execution monitoring).  It supports breakpoints, watchpoints, stack unwinding, multi-threaded program debugging, debugging symbol information (via ELF and DWARF), and C and C++ programs.  It supports multi-target analysis --- meaning your Stackdb program can attach to or spawn multiple target programs (of different types, if desired), and cooperatively analyze or monitor their behavior. However, Stackdb' s defining feature is its ability to create stacks of debugging targets.  This means that Stackdb drivers (which allow you, the user, to attach to a running program and debug it) can be stacked , allowing you to attach to and debug a program running in another program! For instance, using Stackdb, you can attach to a Xen virtual machine and the Linux kernel running inside it (the base target); and subsequently attach to a userspace process running inside that VM (an overlay target).  Stackdb' s user API functions can be applied to all targets.  Thus, you can insert a breakpoint on the sys_open system call function in the Linux kernel in your base target, and another on the make_child function in a bash process running in userspace (your overlay target).",
                    "license_id": 36,
                    "owner_id": 2,
                    "parent_id": null
                },
                "publisher": {
                    "person": {
                        "id": 14,
                        "name": "David Johnson"
                    },
                    "id": 2
                },
                "id": 186,
                "artifact_id": 432,
                "time": "2021-08-12T14:34:53.324473",
                "notes": null,
                "version": 0
            },
            "relationships": [
                {
                    "related_artifact_group": {
                        "owner": {
                            "person": {
                                "id": 14,
                                "name": "David Johnson"
                            },
                            "id": 2
                        },
                        "publication": {
                            "artifact": {
                                "owner": {
                                    "person": {
                                        "id": 14,
                                        "name": "David Johnson"
                                    },
                                    "id": 2
                                },
                                "id": 433,
                                "artifact_group_id": 433,
                                "type": "publication",
                                "url": "https://dl.acm.org/doi/10.1145/2576195.2576212",
                                "ext_id": "10.1145/2576195.2576212",
                                "title": "Composable multi-level debugging with Stackdb",
                                "name": "Composable multi-level debugging with Stackdb",
                                "ctime": "2021-08-12T14:28:05.910731",
                                "mtime": "2021-08-12T14:35:08.907974",
                                "description": "Virtual machine introspection (VMI) allows users to debug software that executes within\na virtual machine. To support rich, whole-system analyses, a VMI tool must inspect\nand control systems at multiple levels of the software stack. Traditional debuggers\nenable inspection and control, but they limit users to treating a whole system as\njust one kind of target: e.g., just a kernel, or just a process, but not both.We created\nStackdb, a debugging library with VMI support that allows one to monitor and control\na whole system through multiple, coordinated targets. A target corresponds to a particular\nlevel of the system's software stack; multiple targets allow a user to observe a VM\nguest at several levels of abstraction simultaneously. For example, with Stackdb,\none can observe a PHP script running in a Linux process in a Xen VM via three coordinated\ntargets at the language, process, and kernel levels. Within Stackdb, higher-level\ntargets are components that utilize lower-level targets; a key contribution of Stackdb\nis its API that supports multi-level and flexible \"stacks\" of targets. This paper\ndescribes the challenges we faced in creating Stackdb, presents the solutions we devised,\nand evaluates Stackdb through its application to a security-focused, whole-system\ncase study.",
                                "license_id": null,
                                "owner_id": 2,
                                "parent_id": null
                            },
                            "publisher": {
                                "person": {
                                    "id": 14,
                                    "name": "David Johnson"
                                },
                                "id": 2
                            },
                            "id": 187,
                            "artifact_id": 433,
                            "time": "2021-08-12T14:35:08.908361",
                            "notes": null,
                            "version": 0
                        },
                        "id": 433,
                        "owner_id": 2,
                        "publication_id": 187,
                        "next_version": 1
                    },
                    "id": 200,
                    "artifact_id": 432,
                    "artifact_group_id": 432,
                    "relation": "uses",
                    "related_artifact_id": 433,
                    "related_artifact_group_id": 433
                }
            ],
            "reverse_relationships": [
                {
                    "id": 171,
                    "artifact_id": 432,
                    "artifact_group_id": 432,
                    "relation": "describes",
                    "related_artifact_id": 433,
                    "related_artifact_group_id": 433,
                    "related_artifact_group": {
                        "owner": {
                            "person": {
                                "id": 14,
                                "name": "David Johnson"
                            },
                            "id": 2
                        },
                        "publication": {
                            "artifact": {
                                "owner": {
                                    "person": {
                                        "id": 14,
                                        "name": "David Johnson"
                                    },
                                    "id": 2
                                },
                                "id": 433,
                                "artifact_group_id": 433,
                                "type": "publication",
                                "url": "https://dl.acm.org/doi/10.1145/2576195.2576212",
                                "ext_id": "10.1145/2576195.2576212",
                                "title": "Composable multi-level debugging with Stackdb",
                                "name": "Composable multi-level debugging with Stackdb",
                                "ctime": "2021-08-12T14:28:05.910731",
                                "mtime": "2021-08-12T14:35:08.907974",
                                "description": "Virtual machine introspection (VMI) allows users to debug software that executes within\na virtual machine. To support rich, whole-system analyses, a VMI tool must inspect\nand control systems at multiple levels of the software stack. Traditional debuggers\nenable inspection and control, but they limit users to treating a whole system as\njust one kind of target: e.g., just a kernel, or just a process, but not both.We created\nStackdb, a debugging library with VMI support that allows one to monitor and control\na whole system through multiple, coordinated targets. A target corresponds to a particular\nlevel of the system's software stack; multiple targets allow a user to observe a VM\nguest at several levels of abstraction simultaneously. For example, with Stackdb,\none can observe a PHP script running in a Linux process in a Xen VM via three coordinated\ntargets at the language, process, and kernel levels. Within Stackdb, higher-level\ntargets are components that utilize lower-level targets; a key contribution of Stackdb\nis its API that supports multi-level and flexible \"stacks\" of targets. This paper\ndescribes the challenges we faced in creating Stackdb, presents the solutions we devised,\nand evaluates Stackdb through its application to a security-focused, whole-system\ncase study.",
                                "license_id": null,
                                "owner_id": 2,
                                "parent_id": null
                            },
                            "publisher": {
                                "person": {
                                    "id": 14,
                                    "name": "David Johnson"
                                },
                                "id": 2
                            },
                            "id": 187,
                            "artifact_id": 433,
                            "time": "2021-08-12T14:35:08.908361",
                            "notes": null,
                            "version": 0
                        },
                        "id": 433,
                        "owner_id": 2,
                        "publication_id": 187,
                        "next_version": 1
                    }
                }
            ],
            "publications": [
                {
                    "artifact": {
                        "owner": {
                            "person": {
                                "id": 14,
                                "name": "David Johnson"
                            },
                            "id": 2
                        },
                        "id": 432,
                        "artifact_group_id": 432,
                        "type": "software",
                        "url": "https://gitlab.flux.utah.edu/a3/vmi",
                        "ext_id": "https://gitlab.flux.utah.edu/a3/vmi",
                        "title": "Stackdb: A C Library for \" Stackable\" Debugging and Virtual Machine Introspection",
                        "name": null,
                        "ctime": "2021-08-12T14:24:49.836067",
                        "mtime": "2021-08-12T14:34:53.324048",
                        "description": "Stackdb is a C library that allows a user to write programs to debug, inspect, modify, and analyze the behavior of other running programs --- from virtual machines (Xen, KVM/QEMU) to Linux userspace programs (via ptrace(2) ).  This means Stackdb can be used to debug programs running on your desktop machine; or it can be used to debug virtual machines and the programs running inside them! Stackdb is useful both as a featureful debugger, and as a tool for Virtual Machine Introspection (i.e., memory forensics, execution monitoring).  It supports breakpoints, watchpoints, stack unwinding, multi-threaded program debugging, debugging symbol information (via ELF and DWARF), and C and C++ programs.  It supports multi-target analysis --- meaning your Stackdb program can attach to or spawn multiple target programs (of different types, if desired), and cooperatively analyze or monitor their behavior. However, Stackdb' s defining feature is its ability to create stacks of debugging targets.  This means that Stackdb drivers (which allow you, the user, to attach to a running program and debug it) can be stacked , allowing you to attach to and debug a program running in another program! For instance, using Stackdb, you can attach to a Xen virtual machine and the Linux kernel running inside it (the base target); and subsequently attach to a userspace process running inside that VM (an overlay target).  Stackdb' s user API functions can be applied to all targets.  Thus, you can insert a breakpoint on the sys_open system call function in the Linux kernel in your base target, and another on the make_child function in a bash process running in userspace (your overlay target).",
                        "license_id": 36,
                        "owner_id": 2,
                        "parent_id": null
                    },
                    "publisher": {
                        "person": {
                            "id": 14,
                            "name": "David Johnson"
                        },
                        "id": 2
                    },
                    "id": 186,
                    "artifact_id": 432,
                    "time": "2021-08-12T14:34:53.324473",
                    "notes": null,
                    "version": 0
                }
            ],
            "id": 432,
            "owner_id": 2,
            "publication_id": 186,
            "next_version": 1
        },
        "license": {
            "id": 36,
            "short_name": "GPL-2.0",
            "long_name": "GNU General Public License version 2",
            "url": "https://opensource.org/licenses/GPL-2.0",
            "verified": true
        },
        "meta": [
            {
                "id": 5182,
                "name": "clone_url",
                "value": "https://gitlab.flux.utah.edu/a3/vmi",
                "type": null,
                "source": null
            },
            {
                "id": 5183,
                "name": "git_url",
                "value": "git://gitlab.flux.utah.edu/a3/vmi.git",
                "type": null,
                "source": null
            },
            {
                "id": 5184,
                "name": "html_url",
                "value": "https://gitlab.flux.utah.edu/a3/vmi",
                "type": null,
                "source": null
            },
            {
                "id": 5185,
                "name": "languages",
                "value": "C",
                "type": null,
                "source": null
            }
        ],
        "tags": [
            {
                "id": 7795,
                "tag": "vmi",
                "source": ""
            },
            {
                "id": 7796,
                "tag": "virtual machine introspection",
                "source": ""
            },
            {
                "id": 7797,
                "tag": "debugging",
                "source": ""
            },
            {
                "id": 7798,
                "tag": "xen",
                "source": ""
            },
            {
                "id": 7799,
                "tag": "kvm",
                "source": ""
            },
            {
                "id": 7800,
                "tag": "virtual machine",
                "source": ""
            },
            {
                "id": 7801,
                "tag": "dwarf",
                "source": ""
            },
            {
                "id": 7855,
                "tag": "Stackdb",
                "source": ""
            }
        ],
        "files": [
            {
                "file_content": null,
                "members": [
                    {
                        "file_content": {
                            "id": 211,
                            "content": "",
                            "hash": "2xugpBK4nEim9yvXmun+tlpKxzzezyvc1BT1jRwEZxA=",
                            "size": 20450
                        },
                        "id": 220,
                        "pathname": "COPYING",
                        "html_url": null,
                        "download_url": null,
                        "name": "COPYING",
                        "filetype": "text",
                        "size": 20450,
                        "mtime": "2021-08-12T00:00:00"
                    },
                    {
                        "file_content": {
                            "id": 212,
                            "content": "U3RhY2tkYjogQSBDIExpYnJhcnkgZm9yICJTdGFja2FibGUiIERlYnVnZ2luZyBhbmQgVmlydHVhbCBNYWNoaW5lIEludHJvc3BlY3Rpb24KPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KClN0YWNrZGIgaXMgYSBDIGxpYnJhcnkgdGhhdCBhbGxvd3MgYSB1c2VyIHRvIHdyaXRlIHByb2dyYW1zIHRvIGRlYnVnLAppbnNwZWN0LCBtb2RpZnksIGFuZCBhbmFseXplIHRoZSBiZWhhdmlvciBvZiBvdGhlciBydW5uaW5nIHByb2dyYW1zIC0tLQpmcm9tIHZpcnR1YWwgbWFjaGluZXMgKFhlbiwgS1ZNL1FFTVUpIHRvIExpbnV4IHVzZXJzcGFjZSBwcm9ncmFtcyAodmlhCmBwdHJhY2UoMilgKS4gIFRoaXMgbWVhbnMgU3RhY2tkYiBjYW4gYmUgdXNlZCB0byBkZWJ1ZyBwcm9ncmFtcyBydW5uaW5nCm9uIHlvdXIgZGVza3RvcCBtYWNoaW5lOyBvciBpdCBjYW4gYmUgdXNlZCB0byBkZWJ1ZyB2aXJ0dWFsIG1hY2hpbmVzIGFuZAp0aGUgcHJvZ3JhbXMgcnVubmluZyBpbnNpZGUgdGhlbSEKClN0YWNrZGIgaXMgdXNlZnVsIGJvdGggYXMgYSBmZWF0dXJlZnVsIGRlYnVnZ2VyLCBhbmQgYXMgYSB0b29sIGZvcgpWaXJ0dWFsIE1hY2hpbmUgSW50cm9zcGVjdGlvbiAoaS5lLiwgbWVtb3J5IGZvcmVuc2ljcywgZXhlY3V0aW9uCm1vbml0b3JpbmcpLiAgSXQgc3VwcG9ydHMgYnJlYWtwb2ludHMsIHdhdGNocG9pbnRzLCBzdGFjayB1bndpbmRpbmcsCm11bHRpLXRocmVhZGVkIHByb2dyYW0gZGVidWdnaW5nLCBkZWJ1Z2dpbmcgc3ltYm9sIGluZm9ybWF0aW9uICh2aWEgRUxGCmFuZCBEV0FSRiksIGFuZCBDIGFuZCBDKysgcHJvZ3JhbXMuICBJdCBzdXBwb3J0cyBtdWx0aS10YXJnZXQgYW5hbHlzaXMKLS0tIG1lYW5pbmcgeW91ciBTdGFja2RiIHByb2dyYW0gY2FuIGF0dGFjaCB0byBvciBzcGF3biBtdWx0aXBsZSB0YXJnZXQKcHJvZ3JhbXMgKG9mIGRpZmZlcmVudCB0eXBlcywgaWYgZGVzaXJlZCksIGFuZCBjb29wZXJhdGl2ZWx5IGFuYWx5emUgb3IKbW9uaXRvciB0aGVpciBiZWhhdmlvci4KCkhvd2V2ZXIsIFN0YWNrZGIncyBkZWZpbmluZyBmZWF0dXJlIGlzIGl0cyBhYmlsaXR5IHRvIGNyZWF0ZSAqc3RhY2tzKiBvZgpkZWJ1Z2dpbmcgdGFyZ2V0cy4gIFRoaXMgbWVhbnMgdGhhdCBTdGFja2RiIGRyaXZlcnMgKHdoaWNoIGFsbG93IHlvdSwKdGhlIHVzZXIsIHRvIGF0dGFjaCB0byBhIHJ1bm5pbmcgcHJvZ3JhbSBhbmQgZGVidWcgaXQpIGNhbiBiZQoqKnN0YWNrZWQqKiwgYWxsb3dpbmcgeW91IHRvIGF0dGFjaCB0byBhbmQgZGVidWcgYSBwcm9ncmFtIHJ1bm5pbmcgaW4KYW5vdGhlciBwcm9ncmFtISAgRm9yIGluc3RhbmNlLCB1c2luZyBTdGFja2RiLCB5b3UgY2FuIGF0dGFjaCB0byBhIFhlbgp2aXJ0dWFsIG1hY2hpbmUgYW5kIHRoZSBMaW51eCBrZXJuZWwgcnVubmluZyBpbnNpZGUgaXQgKHRoZSAqYmFzZSoKdGFyZ2V0KTsgYW5kIHN1YnNlcXVlbnRseSBhdHRhY2ggdG8gYSB1c2Vyc3BhY2UgcHJvY2VzcyBydW5uaW5nIGluc2lkZQp0aGF0IFZNIChhbiAqb3ZlcmxheSogdGFyZ2V0KS4gIFN0YWNrZGIncyB1c2VyIEFQSSBmdW5jdGlvbnMgY2FuIGJlCmFwcGxpZWQgdG8gYWxsIHRhcmdldHMuICBUaHVzLCB5b3UgY2FuIGluc2VydCBhIGJyZWFrcG9pbnQgb24gdGhlCmBzeXNfb3BlbmAgc3lzdGVtIGNhbGwgZnVuY3Rpb24gaW4gdGhlIExpbnV4IGtlcm5lbCBpbiB5b3VyIGJhc2UgdGFyZ2V0LAphbmQgYW5vdGhlciBvbiB0aGUgYG1ha2VfY2hpbGRgIGZ1bmN0aW9uIGluIGEgYGJhc2hgIHByb2Nlc3MgcnVubmluZyBpbgp1c2Vyc3BhY2UgKHlvdXIgKm92ZXJsYXkqIHRhcmdldCkuCgoKU3VwcG9ydGVkIFBsYXRmb3JtcwotLS0tLS0tLS0tLS0tLS0tLS0tCgpTdGFja2RiIGJ1aWxkcyBhbmQgcnVucyBvbiBMaW51eC4gIEl0cyBiYXNlIGRyaXZlcnMgYWxsb3cgeW91IHRvIGF0dGFjaAp0byB0aGUgZm9sbG93aW5nIHRhcmdldHM6IFhlbiBWTXMsIEtWTS9RRU1VIFZNcywgTGludXggdXNlcnNwYWNlCnByb2Nlc3Nlcy4gIEl0IHByb3ZpZGVzIG9uZSAqcGVyc29uYWxpdHkqIChTdGFja2RiJ3MgYWJzdHJhY3Rpb24gZm9yCmVuaGFuY2luZyBpdHMgbW9kZWwgb2YgdGhlIHJ1bm5pbmcgdGFyZ2V0KSwgYSBnZW5lcmljIExpbnV4IHBlcnNvbmFsaXR5CnN1cHBvcnRpbmcga2VybmVscyBmcm9tIDIuNi4xOCB0byAzLjgueCAoYW5kIHBvc3NpYmx5IGhpZ2hlcikuICBZb3UnbGwKd2FudCB0byBhdHRhY2ggdGhlICJMaW51eCIgcGVyc29uYWxpdHkgdG8gYW55IFhlbiBvciBLVk0gVk0gdGhhdCBpcwpydW5uaW5nIGEgTGludXgga2VybmVsKS4gIEl0cyBvdmVybGF5IGRyaXZlcnMgYWxsb3cgeW91IHRvIGF0dGFjaCB0byBPUwpQcm9jZXNzZXMgKGkuZS4sIHlvdSBjYW4gYXR0YWNoIHRvIGFueSB1c2Vyc3BhY2UgcHJvY2VzcyBydW5uaW5nIGluIGEKYmFzZSB0YXJnZXQgd2hvc2UgZHJpdmVyIGFuZC9vciBwZXJzb25hbGl0eSBzdXBwb3J0cyBTdGFja2RiJ3MgUHJvY2VzcwphYnN0cmFjdGlvbiAtLS0gdGhpcyBpcyBvbmUga2luZCBvZiAqc3RhY2sqIG9mIHRhcmdldHMgeW91IGNhbiBjcmVhdGUuCkFub3RoZXIgb3ZlcmxheSBkcml2ZXIsIHRoZSBQSFAgZHJpdmVyLCBhbGxvd3MgeW91IHRvIHN0YWNrIGEgUEhQIHRhcmdldAphdG9wIGEgcHJvY2VzcyB0YXJnZXQgYW5kIHBsYWNlIHByb2JlcyBvbiBQSFAgZnVuY3Rpb24gc3ltYm9scy4gIFRoaXMKbWVhbnMgdGhlIGZvbGxvd2luZyBzdGFja3MgYXJlIHBvc3NpYmxlOgoKICAqIFhlbiBWTSArIExpbnV4IFBlcnNvbmFsaXR5IC0+IE9TIFByb2Nlc3MgLT4gUEhQCiAgKiBLVk0vUUVNVSBWTSArIExpbnV4IFBlcnNvbmFsaXR5IC0+IE9TIFByb2Nlc3MgLT4gUEhQCiAgKiBwdHJhY2UgLT4gUEhQCgphbmQgb2YgY291cnNlLCB5b3UgY2FuIHVzZSBwYXJ0aWFsIHN0YWNrcyBvZiB0YXJnZXRzLCBvciBubyBzdGFjayBhdAphbGwsIGlmIHlvdSBzaW1wbHkgd2FudCB0byBpbnNwZWN0IGEgWGVuIFZNLgoKRmluYWxseSwgU3RhY2tkYiBzdXBwb3J0cyBgeDg2YCBhbmQgYHg4Nl82NGAgYXJjaGl0ZWN0dXJlcy4gIFlvdXIKU3RhY2tkYiBwcm9ncmFtIGFuZCB0YXJnZXQgcHJvZ3JhbSBtdXN0IGJlIHRoZSBzYW1lIGFyY2hpdGVjdHVyZTsgYXQKcHJlc2VudCB3ZSBkbyBub3Qgc3VwcG9ydCBgeDg2XzY0YCBhbmFseXNpcyBvZiBhbiBgeDg2YCBWTSwgZm9yCmluc3RhbmNlLiAgU3RhY2tkYiBpcyBhIHJlc2VhcmNoIHByb2plY3QsIGZpcnN0IGFuZCBmb3JlbW9zdDsgc2FkbHksIHdlCmhhdmUgbm90IGJlZW4gYWJsZSB0byBmaW5kIHRpbWUgdG8gc3VwcG9ydCBhbGwgdGhlIGRlc2lyYWJsZSBmZWF0dXJlcyBvZgpmdWxsIGFyY2hpdGVjdHVyZSBhYnN0cmFjdGlvbi4KCgpPYnRhaW5pbmcgdGhlIFNvZnR3YXJlCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCllvdSBjYW4gb2J0YWluIFN0YWNrZGIgYXQgPGh0dHBzOi8vZ2l0bGFiLmZsdXgudXRhaC5lZHUvYTMvdm1pPi4KWW91IGNhbiBicm93c2UgdGhlIHNvdXJjZSByZXBvc2l0b3J5IGF0CjxodHRwczovL2dpdGxhYi5mbHV4LnV0YWguZWR1L2EzL3ZtaS90cmVlL21hc3Rlcj4uCgoKQWRkaXRpb25hbCBEb2N1bWVudGF0aW9uCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKWW91IGNhbiBhY2Nlc3MgdGhlIG9ubGluZSBkb2N1bWVudGF0aW9uIGF0CjxodHRwOi8vYTMucGFnZXMuZmx1eC51dGFoLmVkdS92bWk+LgoKWW91IGNhbiBhbHNvIHJlYWQgb3VyIGRldGFpbGVkIHBhcGVyIGRlc2NyaWJpbmcgU3RhY2tkYidzIGRlc2lnbiBhbmQKaW50ZXJuYWwgQVBJcyBhdCA8aHR0cDovL3d3dy5mbHV4LnV0YWguZWR1L3BhcGVyL2pvaG5zb24tdmVlMTQ+LiAgVGhpcwpwYXBlciBpcyBhIGdyZWF0IGludHJvZHVjdGlvbiB0byB0aGUgU3RhY2tkYiBjb25jZXB0IGFuZCB0ZXJtaW5vbG9neS4KSXQgaXMgc3RpbGwgaGlnaGx5IHJlbGV2YW50IGFuZCB3b3J0aCByZWFkaW5nIHRvIHVuZGVyc3RhbmQgaG93IHRoZQpzb2Z0d2FyZSB3b3JrcyAgLS0tIGFsdGhvdWdoIHRoZSBBUElzIGRlc2NyaWJlZCBoYXZlIHNpbmNlIGV4cGFuZGVkLgpIb3dldmVyLCBpdCBmdW5jdGlvbnMgYXMgb3VyICJjb25jZXB0dWFsIGxldmVsIiBkZXNjcmlwdGlvbiBvZiBTdGFja2RiLgoKWW91IGNhbiBidWlsZCBhIGxvY2FsIGNvcHkgb2YgdGhlIFN0YWNrZGIgZG9jdW1lbnRhdGlvbiBieSBlbnRlcmluZyB0aGUKYGRvYy9gIHN1YmRpcmVjdG9yeSBhbmQgdHlwaW5nIGBtYWtlYC4gIFRoZSBidWlsZCByZXF1aXJlcyAoYXQgbGVhc3QpCmBkb3h5Z2VuYCwgYHBhbmRvY2AsIGFuZCBgcGRmbGF0ZXhgLgoKCkF1dGhvcnMKLS0tLS0tLQoKU3RhY2tkYiB3YXMgd3JpdHRlbiBhdCB0aGUgW1VuaXZlcnNpdHkgb2YgVXRhaF0sIGluIHRoZSBbRmx1eCBSZXNlYXJjaApHcm91cF0sIGJ5IFtEYXZpZCBKb2huc29uXSAoPGpvaG5zb25kQGNzLnV0YWguZWR1PikuICBJdCBvcmlnaW5hbGx5IGdyZXcKb3V0IG9mIGFuIGB4ODZgLCBYZW4tYmFzZWQgVk1JIGxpYnJhcnkgZGV2ZWxvcGVkIGJ5IFtDaHVuZyBId2FuIEtpbV0KKDxjaHVuZ2tpbUBjcy5wdXJkdWUuZWR1PikgKHN0aWxsIGluIHRoZSBzb3VyY2UgcmVwb3NpdG9yeSBpbiB0aGUKYHZtcHJvYmVzL2Agc3ViZGlyZWN0b3J5KSwgYnV0IGhhcyBiZWVuIGVudGlyZWx5IHJld3JpdHRlbiBhbmQKc2lnbmlmaWNhbnRseSBleHBhbmRlZCBpbnRvIGEgbXVsdGktcGxhdGZvcm0sIG11bHRpLXRhcmdldCwgc3RhY2thYmxlCmRlYnVnZ2VyIGxpYnJhcnkuICBbTWlrZSBIaWJsZXJdICg8aGlibGVyQGNzLnV0YWguZWR1PiksIFtBbnRvbiBCdXJ0c2V2XQooPGFidXJ0c2V2QGNzLnV0YWguZWR1PiksIGFuZCBbRXJpYyBFaWRlXSAoPGVlaWRlQGNzLnV0YWguZWR1PikgaGF2ZQphbHNvIGNvbnRyaWJ1dGVkIHRvIGFzcGVjdHMgb2YgU3RhY2tkYi4KCgoKW1VuaXZlcnNpdHkgb2YgVXRhaF06IGh0dHA6Ly93d3cudXRhaC5lZHUKW0ZsdXggUmVzZWFyY2ggR3JvdXBdOiBodHRwOi8vd3d3LmZsdXgudXRhaC5lZHUKW0RhdmlkIEpvaG5zb25dOiBodHRwOi8vd3d3LmZsdXgudXRhaC5lZHUvcHJvZmlsZS9qb2huc29uZApbQ2h1bmcgSHdhbiBLaW1dOiBodHRwczovL3d3dy5jcy5wdXJkdWUuZWR1L2hvbWVzL2NodW5na2ltCltNaWtlIEhpYmxlcl06IGh0dHA6Ly93d3cuZmx1eC51dGFoLmVkdS9wcm9maWxlL21pa2UKW0FudG9uIEJ1cnRzZXZdOiBodHRwOi8vd3d3LmZsdXgudXRhaC5lZHUvcHJvZmlsZS9hYnVydHNldgpbRXJpYyBFaWRlXTogaHR0cDovL3d3dy5mbHV4LnV0YWguZWR1L3Byb2ZpbGUvZWVpZGUK",
                            "hash": "0KOXCsZILkiJYrwNBtJN/ZJOostVJiuKedRZaBjxR7k=",
                            "size": 5340
                        },
                        "id": 221,
                        "pathname": "README.md",
                        "html_url": null,
                        "download_url": null,
                        "name": "README.md",
                        "filetype": "text",
                        "size": 5340,
                        "mtime": "2021-08-12T00:00:00"
                    }
                ],
                "id": 957,
                "url": "https://gitlab.flux.utah.edu/a3/vmi",
                "name": "https://gitlab.flux.utah.edu/a3/vmi",
                "filetype": "application/x-git",
                "size": null,
                "mtime": null
            }
        ],
        "owner": {
            "person": {
                "id": 14,
                "name": "David Johnson"
            },
            "id": 2
        },
        "importer": {
            "id": 8,
            "name": "gitrepo",
            "version": "0.1"
        },
        "curations": [
            {
                "curator": {
                    "person": {
                        "id": 14,
                        "name": "David Johnson"
                    },
                    "id": 2
                },
                "id": 1764
            },
            {
                "curator": {
                    "person": {
                        "id": 14,
                        "name": "David Johnson"
                    },
                    "id": 2
                },
                "id": 1765
            },
            {
                "curator": {
                    "person": {
                        "id": 14,
                        "name": "David Johnson"
                    },
                    "id": 2
                },
                "id": 1766
            },
            {
                "curator": {
                    "person": {
                        "id": 14,
                        "name": "David Johnson"
                    },
                    "id": 2
                },
                "id": 1767
            },
            {
                "curator": {
                    "person": {
                        "id": 14,
                        "name": "David Johnson"
                    },
                    "id": 2
                },
                "id": 1768
            },
            {
                "curator": {
                    "person": {
                        "id": 14,
                        "name": "David Johnson"
                    },
                    "id": 2
                },
                "id": 1769
            },
            {
                "curator": {
                    "person": {
                        "id": 14,
                        "name": "David Johnson"
                    },
                    "id": 2
                },
                "id": 1770
            },
            {
                "curator": {
                    "person": {
                        "id": 14,
                        "name": "David Johnson"
                    },
                    "id": 2
                },
                "id": 1771
            },
            {
                "curator": {
                    "person": {
                        "id": 14,
                        "name": "David Johnson"
                    },
                    "id": 2
                },
                "id": 1772
            },
            {
                "curator": {
                    "person": {
                        "id": 14,
                        "name": "David Johnson"
                    },
                    "id": 2
                },
                "id": 1773
            },
            {
                "curator": {
                    "person": {
                        "id": 14,
                        "name": "David Johnson"
                    },
                    "id": 2
                },
                "id": 1774
            },
            {
                "curator": {
                    "person": {
                        "id": 14,
                        "name": "David Johnson"
                    },
                    "id": 2
                },
                "id": 1775
            },
            {
                "curator": {
                    "person": {
                        "id": 14,
                        "name": "David Johnson"
                    },
                    "id": 2
                },
                "id": 1819
            }
        ],
        "publication": {
            "publisher": {
                "person": {
                    "id": 14,
                    "name": "David Johnson"
                },
                "id": 2
            },
            "artifact": 432,
            "id": 186,
            "artifact_id": 432,
            "time": "2021-08-12T14:34:53.324473",
            "notes": null,
            "version": 0
        },
        "releases": [],
        "affiliations": [
            {
                "affiliation": {
                    "person": {
                        "id": 1295,
                        "name": "David M. Johnson",
                        "email": "johnsond@flux.utah.edu",
                        "research_interests": null,
                        "website": null
                    },
                    "org": null,
                    "id": 1334
                },
                "id": 2107,
                "roles": "Author"
            },
            {
                "affiliation": {
                    "person": {
                        "id": 1257,
                        "name": "Eric Eide",
                        "email": "eeide@cs.utah.edu",
                        "research_interests": null,
                        "website": null
                    },
                    "org": null,
                    "id": 1335
                },
                "id": 2108,
                "roles": "Author"
            },
            {
                "affiliation": {
                    "person": {
                        "id": 1296,
                        "name": "Richard Li",
                        "email": "licai@flux.utah.edu",
                        "research_interests": null,
                        "website": null
                    },
                    "org": null,
                    "id": 1336
                },
                "id": 2109,
                "roles": "Author"
            },
            {
                "affiliation": {
                    "person": {
                        "id": 1299,
                        "name": "Mike Hibler",
                        "email": "hibler@cs.utah.edu",
                        "research_interests": null,
                        "website": null
                    },
                    "org": null,
                    "id": 1339
                },
                "id": 2112,
                "roles": "Author"
            },
            {
                "affiliation": {
                    "person": {
                        "id": 1300,
                        "name": "Prashanth Nayak",
                        "email": "pnayak@flux.utah.edu",
                        "research_interests": null,
                        "website": null
                    },
                    "org": null,
                    "id": 1340
                },
                "id": 2113,
                "roles": "Author"
            },
            {
                "affiliation": {
                    "person": {
                        "id": 1302,
                        "name": "Anton Burtsev",
                        "email": "aburtsev@flux.utah.edu",
                        "research_interests": null,
                        "website": null
                    },
                    "org": null,
                    "id": 1342
                },
                "id": 2115,
                "roles": "Author"
            },
            {
                "affiliation": {
                    "person": {
                        "id": 1303,
                        "name": "Chung Hwan Kim",
                        "email": "chunghwn@cs.utah.edu",
                        "research_interests": null,
                        "website": null
                    },
                    "org": null,
                    "id": 1343
                },
                "id": 2116,
                "roles": "Author"
            }
        ],
        "badges": [
            {
                "badge": {
                    "id": 23,
                    "title": "Artifact Evaluated",
                    "url": "https://www.usenix.org/sites/default/files/usenix_artifact_evaluated_250.png",
                    "image_url": "https://www.usenix.org/sites/default/files/usenix_artifact_evaluated_250.png",
                    "description": "Artifact Evaluated",
                    "version": "",
                    "organization": "USENIX",
                    "venue": null,
                    "issue_time": null,
                    "doi": null,
                    "verified": true
                },
                "id": 36
            }
        ],
        "venues": [],
        "candidate_relationships": [],
        "view_count": 1,
        "exporter": null,
        "id": 432,
        "artifact_group_id": 432,
        "type": "software",
        "url": "https://gitlab.flux.utah.edu/a3/vmi",
        "ext_id": "https://gitlab.flux.utah.edu/a3/vmi",
        "title": "Stackdb: A C Library for \" Stackable\" Debugging and Virtual Machine Introspection",
        "name": null,
        "ctime": "2021-08-12T14:24:49.836067",
        "mtime": "2021-08-12T14:34:53.324048",
        "description": "Stackdb is a C library that allows a user to write programs to debug, inspect, modify, and analyze the behavior of other running programs --- from virtual machines (Xen, KVM/QEMU) to Linux userspace programs (via ptrace(2) ).  This means Stackdb can be used to debug programs running on your desktop machine; or it can be used to debug virtual machines and the programs running inside them! Stackdb is useful both as a featureful debugger, and as a tool for Virtual Machine Introspection (i.e., memory forensics, execution monitoring).  It supports breakpoints, watchpoints, stack unwinding, multi-threaded program debugging, debugging symbol information (via ELF and DWARF), and C and C++ programs.  It supports multi-target analysis --- meaning your Stackdb program can attach to or spawn multiple target programs (of different types, if desired), and cooperatively analyze or monitor their behavior. However, Stackdb' s defining feature is its ability to create stacks of debugging targets.  This means that Stackdb drivers (which allow you, the user, to attach to a running program and debug it) can be stacked , allowing you to attach to and debug a program running in another program! For instance, using Stackdb, you can attach to a Xen virtual machine and the Linux kernel running inside it (the base target); and subsequently attach to a userspace process running inside that VM (an overlay target).  Stackdb' s user API functions can be applied to all targets.  Thus, you can insert a breakpoint on the sys_open system call function in the Linux kernel in your base target, and another on the make_child function in a bash process running in userspace (your overlay target).",
        "parent_id": null
    },
    "avg_rating": null,
    "num_ratings": 0,
    "num_reviews": 0,
    "rating_review": []
}